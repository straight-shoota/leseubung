// Generated by CoffeeScript 1.12.2
(function() {
  var assert, normalize;

  assert = function(a, b) {
    if (a === b) {
      return console.log("OK: " + a + " = " + b);
    } else {
      return console.log("Failure: \n" + a + " !=\n" + b);
    }
  };

  normalize = function(s) {
    var history, process, processed, tune, tuneRegexp, tunes, tunesRegexp;
    tunesRegexp = /((?:_{0,2}|\^{0,2}|=)[a-hA-H][,']*)/g;
    tuneRegexp = /(_{0,2}|\^{0,2}|=)([a-gA-G])([,']*)/g;
    tunes = s.split(tunesRegexp);
    history = {};
    process = function(s) {
      var accidental, match, octave, ref, tune;
      match = tuneRegexp.exec(s);
      if (!match) {
        return s;
      }
      ref = [match[1], match[2], match[3]], accidental = ref[0], tune = ref[1], octave = ref[2];
      if ((history[tune] != null) === accidental) {
        accidental = '';
        console.log("HIT");
      }
      history[tune] = accidental;
      console.log(tune, [accidental, tune, octave], history);
      return [accidental, tune, octave].join('');
    };
    processed = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = tunes.length; i < len; i++) {
        tune = tunes[i];
        results.push(process(tune));
      }
      return results;
    })();
    return processed.join('');
  };

  assert(normalize('C/2_EC/2 z_E F/2=F/2_E/2^F/2 z=F'), 'C/2_EC/2 z_E F/2=F/2_E/2^F/2 z=F');

  assert(normalize('z3/2=F/2 _E2 z/2=F/2^F/2^F/2 z/2_B_B/2'), 'z3/2=F/2 _E2 z/2F/2^F/2F/2 z/2_BB/2');

}).call(this);
